<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="ehcache.xsd" updateCheck="false" >
<!-- updateCheck="true" monitoring="autodetect" dynamicConfig="true" http://ehcache.org/ehcache.xsd-->

    <!-- Sets the path to the directory where cache .data files are created.

         If the path is a Java System Property it is replaced by
         its value in the running VM.

         The following properties are translated:
         user.home - User's home directory
         user.dir - User's current working directory
         java.io.tmpdir - Default temp file path -->
    <diskStore path="java.io.tmpdir"/>

    <!-- 分布式缓存 Ehcache 有传统的RMI，1.5版的JGroups，1.6版的JMS http://ehcache.org/documentation/replication/index-->
    <!-- Cluster localhost setting -->
    <cacheManagerPeerListenerFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"
            properties="hostName=localhost, port=40002,socketTimeoutMillis=2000" />

    <!-- Cluster peer host setting 也有自动发现，广播的简单配法-->
    <cacheManagerPeerProviderFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
            properties="peerDiscovery=manual,
            rmiUrls=//localhost:40001/com.elulian.CustomerSecurityManagementSystem.vo.UserInfo|//localhost:40001/com.elulian.CustomerSecurityManagementSystem.vo.UserInfo.roles|
                    //localhost:40001/com.elulian.CustomerSecurityManagementSystem.vo.Role|//localhost:40001/com.elulian.CustomerSecurityManagementSystem.vo.CustomerInfo|
                    //localhost:40001/com.elulian.CustomerSecurityManagementSystem.vo.RiskRank|//localhost:40001/com.elulian.CustomerSecurityManagementSystem.vo.Threshold" />
    
     <!--Default Cache configuration. These will applied to caches programmatically created through
        the CacheManager.

        maxElementsInMemory            - Sets the maximum number of objects that will be created in memory
                            
                            到达内存中最大量时的过期/移出算法  过期算法: 如果缓存已经失效，人道毁灭之。失效算法由3个参数组成：
        eternal                        - Sets whether elements are eternal. If eternal,  timeouts are ignored and the
                                         element is never expired. 如果为true，则永不过期，忽略后两个参数的设置。
                                         ehcache_failsafe.xml 为false。                                
        timeToIdleSeconds              - Sets the time to idle for an element before it expires.
                                         i.e. The maximum amount of time between accesses before an element expires
                                         Is only used if the element is not eternal.
                                         Optional attribute. A value of 0 means that an Element can idle for infinity.
                                         The default value is 0. 空闲无访问时间，默认为0，永不过时。ehcache_failsafe.xml 设为120秒。
        timeToLiveSeconds              - Sets the time to live for an element before it expires.
                                         i.e. The maximum time between creation time and when an element expires.
                                         Is only used if the element is not eternal. 存活时间，默认为0，永不过时。ehcache_failsafe.xml 设为120秒 
                                         Optional attribute. A value of 0 means that and Element can live for infinity.
                                         The default value is 0.
                                         
        memoryStoreEvictionPolicy        默认为LRU(最近最少访问),另有先进先出(FIFO)，最少访问次数(LFU)
        
        persistence strategy            localTempSwap http://ehcache.org/documentation/configuration/fast-restart  
        overflowToDisk                 - Sets whether elements can overflow to disk when the in-memory cache
                                         has reached the maxInMemory limit. true，则将清除出来的缓存持久化到磁盘，否则人道毁灭之。

        diskPersistent                 - Whether the disk store persists between restarts of the Virtual Machine.
                                         The default value is false.当应用重启时，可将缓存先持久化到硬盘，重启后再行载入，节省大量的重新从数据库载入。
                                                                                                                                                但只适合那些缓存不怎么变化，或者有特殊机制保证重启后应用能接收到重启这段时间里缓存变化信息的情况。 
        diskExpiryThreadIntervalSeconds- The number of seconds between runs of the disk expiry thread. The default value
                                         is 120 seconds. 使用过期算法清除磁盘中失效对象的间隔
        -->
   
    <defaultCache
        statistics="true"
        maxElementsInMemory="10000"
        eternal="false"
        timeToIdleSeconds="3600"
        timeToLiveSeconds="100000"
        memoryStoreEvictionPolicy="LRU"
        maxElementsOnDisk="10000000"
        diskExpiryThreadIntervalSeconds="600"
     >
        <persistence strategy="localTempSwap" />
        <!-- equals overflowToDisk="true"
        diskPersistent="false" -->
     </defaultCache>
        
    <!-- See http://ehcache.sourceforge.net/documentation/#mozTocId258426 for how to configure caching for your objects -->
    
    <!-- for hibernate query -->
    <cache name="org.hibernate.cache.internal.StandardQueryCache"
        statistics="true"
		maxEntriesLocalHeap="5"
		eternal="false"
		timeToLiveSeconds="120">
	   <persistence strategy="localTempSwap" />
	</cache>
    
    <cache name="org.hibernate.cache.spi.UpdateTimestampsCache"
        statistics="true"
		maxEntriesLocalHeap="5000"
		eternal="true">
	   <persistence strategy="localTempSwap" />
	   
	</cache>
    
    <!-- http://ehcache.org/documentation/apis/cache-event-listeners -->
    <cache name="com.elulian.CustomerSecurityManagementSystem.vo.Role"
	    statistics="true"
	    maxEntriesLocalHeap="10"
	    eternal="true">
	    <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" properties="replicateAsynchronously=false,replicatePuts=false,replicateUpdatesViaCopy=false" />
	    　       <persistence strategy="none" />
    </cache>
   <!--  <cache name="com.elulian.CustomerSecurityManagementSystem.vo.Role.users"
	    maxEntriesLocalHeap="10000"
	    eternal="false"
	    timeToIdleSeconds="300"
	    timeToLiveSeconds="600">
        <persistence strategy="localTempSwap" />
    </cache> -->
    
    <!-- 　　　cacheEventListenerFactory　class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"　
　　　　　properties="replicateAsynchronously=true,　
　　　　　replicatePuts=true,　
　　　　　replicateUpdates=true,　
　　　　　replicateUpdatesViaCopy=true,　
　　　　　replicateRemovals=true　
　　　　　asynchronousReplicationIntervalMillis=<number　of　milliseconds">　
　　　　　propertySeparator=","　

      replicateAsynchronously　 对象同步是否异步完成，默认为true。如果比较紧急就设为false。
                            在一致性时间性要求不强的时候，设为异步可大大提供性能，因为它是异步立即返回的，而且可以批量提交。
      replicateUpdatesViaCopy 是否将对象变更复制到所有节点，还是只是发送一个失效信息，让对方该缓存失效，当对方需要该缓存时重新计算载入。
                            默认为true。鉴于对象复制的消耗挺大的，又有锁的问题，而且对方也未必需要该对象，所以此属性建议设为false。如果业务上真的需要设为true时，就可考虑使用Terracotta了。
      replicatePuts、replicateUpdates、replicateRemovals　 增删改是否同步，默认都为true。但因为我们前面选择了失效算法，所以replicatePuts 要设为false。  -->
    
    <cache name="com.elulian.CustomerSecurityManagementSystem.vo.UserInfo"
	    statistics="true"
	    maxEntriesLocalHeap="5000"
	    eternal="true">
        <persistence strategy="localTempSwap" />
                　     <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" properties="replicateAsynchronously=false,replicatePuts=false,replicateUpdatesViaCopy=false" />
    </cache>
   
    <cache name="com.elulian.CustomerSecurityManagementSystem.vo.UserInfo.roles"
        statistics="true"
        maxEntriesLocalHeap="5000"
        eternal="true">
        <persistence strategy="localTempSwap" />
                　      <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" properties="replicateAsynchronously=false,replicatePuts=false,replicateUpdatesViaCopy=false" />
    </cache>
    
    <cache name="com.elulian.CustomerSecurityManagementSystem.vo.CustomerInfo"
	    statistics="true"
	    maxEntriesLocalHeap="10000"
	    eternal="false"
	    timeToIdleSeconds="3600"
	    timeToLiveSeconds="7200">
	    <persistence strategy="localTempSwap" />
	   <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" properties="replicateAsynchronously=false,replicatePuts=false,replicateUpdatesViaCopy=false" />　
    </cache>
    
    <cache name="com.elulian.CustomerSecurityManagementSystem.vo.RiskRank"
	    statistics="true"
	    maxEntriesLocalHeap="10"
	    eternal="true">
	    <persistence strategy="localTempSwap" />
        　               <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" properties="replicateAsynchronously=false,replicatePuts=false,replicateUpdatesViaCopy=false" />
    </cache>
    
    <cache name="com.elulian.CustomerSecurityManagementSystem.vo.Threshold"
	    statistics="true"
	    maxEntriesLocalHeap="100"
	    eternal="true">
	    <persistence strategy="localTempSwap" />
	       　  <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" properties="replicateAsynchronously=false,replicatePuts=false,replicateUpdatesViaCopy=false" />
    </cache>
</ehcache>