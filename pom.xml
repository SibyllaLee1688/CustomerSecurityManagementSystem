<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.elulian</groupId>
	<artifactId>CustomerSecurityManagementSystem</artifactId>
	<packaging>war</packaging>
	<version>0.1-SNAPSHOT</version>
	<name>Cloud Lu SSH/SSO Application</name>
	<url>http://www.mycompany.com</url>

	<prerequisites>
		<maven>3.0.5</maven>
	</prerequisites>


	<!-- <repositories> <repository> <id>com.springsource.repository.bundles.release</id> 
		<name>EBR Spring Release Repository</name> <url>http:// repository.springsource.com/maven/bundles/release</url> 
		</repository> <repository> <id>com.springsource.repository.bundles.external</id> 
		<name>EBR External Release Repository</name> <url>http:// repository.springsource.com/maven/bundles/external</url> 
		</repository> </repositories> <repository> <id>springsource-repo</id> <name>SpringSource 
		Repository</name> <url>http://repo.springsource.org/release</url> </repository> -->
		
	<properties>
		<!-- Application settings -->
		<copyright.year>2014</copyright.year>
		<dao.framework>hibernate</dao.framework>
		<web.framework>struts</web.framework>
		<amp.genericCore>true</amp.genericCore>
		<amp.fullSource>false</amp.fullSource>
		<db.name>CustomerSecurityManagementSystem</db.name>
		<web.deployname>/CustomerSecurityManagementSystem</web.deployname>

		<!-- java common properties -->
		<project.complieSourceVersion>1.6</project.complieSourceVersion>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		 <!-- jse common properties -->
	    <!-- dependency jar -->
	    <project.junitVersion>4.11</project.junitVersion>
	    <project.jmockVersion>2.6.0-RC2</project.jmockVersion>
	    <project.powermock-api-mockitoVersion>1.5.1</project.powermock-api-mockitoVersion>
	    <project.powermoc-api-supportkVersion>1.5.2</project.powermoc-api-supportkVersion>
	    <project.powermock-module-junit4Version>1.5.1</project.powermock-module-junit4Version>
	    <project.mockito-allVersion>1.9.5</project.mockito-allVersion>
	    <project.mysqlConnectorVersion>5.1.30</project.mysqlConnectorVersion>
	    <project.groovy-allVersion>2.3.0</project.groovy-allVersion>
	    	    
	    <!-- dependency plugin -->    
	    <project.dependencyPluginVersion>2.8</project.dependencyPluginVersion>
	    <project.sitePluginVersion>3.3</project.sitePluginVersion>
	    <project.sitePluginSkip>true</project.sitePluginSkip>
	    <!-- for can not open zip file in dependency report generation -->
	    <project.projectInfoReportsPluginVersion>2.7</project.projectInfoReportsPluginVersion>
	    <project.resourcesPluginVersion>2.6</project.resourcesPluginVersion>
	    <project.changePluginVersion>2.10</project.changePluginVersion>
	    <project.cleanPluginVersion>2.5</project.cleanPluginVersion>
	    <project.releasePluginVersion>2.4.2</project.releasePluginVersion>
	    <project.compilerPluginVersion>3.1</project.compilerPluginVersion>
	    <project.javadocPluginVersion>2.9.1</project.javadocPluginVersion>
	    <project.versionsPluginVersion>2.1</project.versionsPluginVersion>
	    <project.checkstylePluginVersion>2.12.1</project.checkstylePluginVersion>
	    <project.jxrPluginVersion>2.4</project.jxrPluginVersion>
	    <project.pmdPluginVersion>3.1</project.pmdPluginVersion>
	    <project.surefireReportPluginVersion>2.17</project.surefireReportPluginVersion>
	    <project.findbugsPluginVersion>2.5.2</project.findbugsPluginVersion>
	    <project.sonarPluginVersion>0.1</project.sonarPluginVersion>
	    <project.cargoPluginVersion>1.4.8</project.cargoPluginVersion>
	    <project.jettyPluginVersion>8.1.15.v20140411</project.jettyPluginVersion>
	    <project.warPluginVersion>2.4</project.warPluginVersion>
	    <!-- change cobertura plugin version back to 2.5.2 to avoid loadCoverageData Error and absent class attribute warning -->
	    <project.coberturaPluginVersion>2.5.2</project.coberturaPluginVersion>
	
		<!-- jee properties -->
		<project.cglib-nodepVersion>3.1</project.cglib-nodepVersion>
		<project.itextVersion>4.2.1</project.itextVersion>
		<project.commons-beanutilsVersion>1.9.1</project.commons-beanutilsVersion>
		<project.commons-configurationVersion>1.10</project.commons-configurationVersion>
		
		<project.servlet-apiVersion>3.0-alpha-1</project.servlet-apiVersion>
		<project.jsp-apiVersion>2.2.1-b03</project.jsp-apiVersion>
		
		<project.jasperreportsVersion>5.5.2</project.jasperreportsVersion>
		<project.jxlVersion>2.6.12</project.jxlVersion>
		<project.urlrewritefilterVersion>4.0.4</project.urlrewritefilterVersion>
		
				
		<!-- Framework dependency versions -->
		<!-- <displaytag.version>1.2</displaytag.version> -->
		<project.springVersion>4.0.4.RELEASE</project.springVersion>
		<project.springSecurityVersion>3.2.3.RELEASE</project.springSecurityVersion>
		<project.strutsVersion>2.3.16.3</project.strutsVersion>
		<project.hibernateVersion>4.3.5.Final</project.hibernateVersion>
		<project.aspectjVersion>1.8.0</project.aspectjVersion>
		<project.openjpaVersion>2.3.0</project.openjpaVersion>
		<project.poiVersion>3.10-FINAL</project.poiVersion>
		
		<wiser.version>1.2</wiser.version>

		<!-- WebTest default target -->
		<webtest.target>run-all-tests</webtest.target>

		<cargo.container>tomcat7x</cargo.container>
		<cargo.container.home>${env.CATALINA_HOME}</cargo.container.home>
		<cargo.container.url>http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.33/bin/apache-tomcat-7.0.33.zip</cargo.container.url>
		<cargo.host>localhost</cargo.host>
		<cargo.port>8081</cargo.port>
		<cargo.wait>false</cargo.wait>

		<!-- Jetty Cargo settings: <cargo.container>jetty6x</cargo.container> <cargo.container.url>http://dist.codehaus.org/jetty/jetty-6.1.21/jetty-6.1.21.zip</cargo.container.url> -->

		<!-- Database settings -->
		<dbunit.dataTypeFactoryName>org.dbunit.ext.mysql.MySqlDataTypeFactory</dbunit.dataTypeFactoryName>
		<dbunit.operation.type>CLEAN_INSERT</dbunit.operation.type>
		<hibernate.dialect>org.hibernate.dialect.MySQL5InnoDBDialect</hibernate.dialect>
		<jdbc.groupId>mysql</jdbc.groupId>
		<jdbc.artifactId>mysql-connector-java</jdbc.artifactId>
		<jdbc.version>${project.mysqlConnectorVersion}</jdbc.version>
		<jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
		<jdbc.url>jdbc:mysql://localhost/${db.name}?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;autoReconnect=true</jdbc.url>
		<jdbc.username>root</jdbc.username>
		<jdbc.password>root</jdbc.password>
		
		
	</properties>	
	<profiles>
		<profile>
			<id>integration-test</id>
			<activation>
				<property>
					<name>!skipTests</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<version>${project.cargoPluginVersion}</version>
						<configuration>
							<wait>${cargo.wait}</wait>
							<container>
								<containerId>${cargo.container}</containerId>
								<home>${cargo.container.home}</home>
								<zipUrlInstaller>
									<url>${cargo.container.url}</url>
									<extractDir>${installDir}</extractDir>
								</zipUrlInstaller>
							</container>
							<configuration>
								<home>${project.build.directory}/${cargo.container}/container</home>
								<properties>
									<cargo.hostname>${cargo.host}</cargo.hostname>
									<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
									<!-- To prevent conflicts with already running instances -->
									<cargo.tomcat.ajp.port>8123</cargo.tomcat.ajp.port>
								</properties>
							</configuration>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>webtest-maven-plugin</artifactId>
						<version>1.0.0</version>
						<executions>
							<execution>
								<id>webtest-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>test</goal>
								</goals>
							</execution>
							<execution>
								<id>webtest-verify</id>
								<phase>verify</phase>
								<goals>
									<goal>verify-result</goal>
								</goals>
							</execution>
							<execution>
								<id>webtest-report-html</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<host>${cargo.host}</host>
							<port>${cargo.port}</port>
							<sourcedirectory>src/test/resources</sourcedirectory>
							<sourcefile>web-tests.xml</sourcefile>
							<target>${webtest.target}</target>
							<basepath>${project.build.finalName}</basepath>
							<resultpath>target/webtest/webtest-results</resultpath>
							<haltonfailure>false</haltonfailure>
							<haltonerror>false</haltonerror>
							<loglevel>fatal</loglevel>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- ================= Production Settings Profile ================= -->
		<!-- Use "-P prod" when you want to use the settings in this profile -->
		<!-- =============================================================== -->
		<profile>
			<id>prod</id>
			<build>
				<plugins>
					<!-- Override location of data file for DbUnit to load (doesn't have 
						negative keys) -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>dbunit-maven-plugin</artifactId>
						<configuration>
							<src>src/main/resources/default-data.xml</src>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- ================= Database Profiles ================= -->
		<profile>
			<id>derby</id>
			<properties>
				<hibernate.dialect>org.hibernate.dialect.DerbyDialect</hibernate.dialect>
				<jdbc.groupId>org.apache.derby</jdbc.groupId>
				<jdbc.artifactId>derbyclient</jdbc.artifactId>
				<jdbc.version>10.2.2.0</jdbc.version>
				<jdbc.driverClassName>org.apache.derby.jdbc.ClientDriver</jdbc.driverClassName>
				<jdbc.url>jdbc:derby://localhost/${db.name};create=true</jdbc.url>
				<jdbc.username>any</jdbc.username>
				<jdbc.password>value</jdbc.password>
			</properties>
		</profile>
		<profile>
			<id>h2</id>
			<properties>
				<dbunit.dataTypeFactoryName>org.dbunit.ext.h2.H2DataTypeFactory</dbunit.dataTypeFactoryName>
				<hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect>
				<jdbc.groupId>com.h2database</jdbc.groupId>
				<jdbc.artifactId>h2</jdbc.artifactId>
				<jdbc.version>1.3.170</jdbc.version>
				<jdbc.driverClassName>org.h2.Driver</jdbc.driverClassName>
				<jdbc.url>jdbc:h2:/tmp/${db.name};MVCC=TRUE</jdbc.url>
				<jdbc.username>sa</jdbc.username>
			</properties>
		</profile>
		<profile>
			<id>hsqldb</id>
			<properties>
				<dbunit.dataTypeFactoryName>org.dbunit.ext.hsqldb.HsqldbDataTypeFactory</dbunit.dataTypeFactoryName>
				<hibernate.dialect>org.hibernate.dialect.HSQLDialect</hibernate.dialect>
				<jdbc.groupId>org.hsqldb</jdbc.groupId>
				<jdbc.artifactId>hsqldb</jdbc.artifactId>
				<jdbc.version>2.2.9</jdbc.version>
				<jdbc.driverClassName>org.hsqldb.jdbcDriver</jdbc.driverClassName>
				<jdbc.url>jdbc:hsqldb:/tmp/${db.name};shutdown=true</jdbc.url>
				<jdbc.username>sa</jdbc.username>
			</properties>
		</profile>
		<profile>
			<id>oracle</id>
			<properties>
				<dbunit.dataTypeFactoryName>org.dbunit.ext.oracle.OracleDataTypeFactory</dbunit.dataTypeFactoryName>
				<dbunit.schema>SYSTEM</dbunit.schema> <!-- Make sure to capitalize the schema name -->
				<hibernate.dialect>org.hibernate.dialect.Oracle9Dialect</hibernate.dialect>
				<jdbc.groupId>com.oracle</jdbc.groupId>
				<jdbc.artifactId>ojdbc14</jdbc.artifactId>
				<jdbc.version>10.2.0.2.0</jdbc.version>
				<jdbc.driverClassName>oracle.jdbc.OracleDriver</jdbc.driverClassName>
				<jdbc.url>jdbc:oracle:thin:@localhost:1521:XE</jdbc.url>
				<jdbc.username>system</jdbc.username>
				<jdbc.password>system</jdbc.password>
			</properties>
		</profile>
		<profile>
			<id>postgresql</id>
			<properties>
				<hibernate.dialect>org.hibernate.dialect.PostgreSQLDialect</hibernate.dialect>
				<jdbc.groupId>postgresql</jdbc.groupId>
				<jdbc.artifactId>postgresql</jdbc.artifactId>
				<jdbc.version>8.1-407.jdbc3</jdbc.version>
				<jdbc.driverClassName>org.postgresql.Driver</jdbc.driverClassName>
				<jdbc.url>jdbc:postgresql://localhost/${db.name}</jdbc.url>
				<jdbc.username>postgres</jdbc.username>
				<jdbc.password>postgres</jdbc.password>
			</properties>
		</profile>
		<profile>
			<!-- You need to enable TCP/IP Connections for SQL Server 2005 after installing. -->
			<!-- http://www.mattwoodward.com/blog/index.cfm?commentID=211 -->
			<id>sqlserver</id>
			<properties>
				<dbunit.dataTypeFactoryName>org.dbunit.ext.mssql.MsSqlDataTypeFactory</dbunit.dataTypeFactoryName>
				<dbunit.operation.type>MSSQL_CLEAN_INSERT</dbunit.operation.type>
				<hibernate.dialect>org.hibernate.dialect.SQLServerDialect</hibernate.dialect>
				<jdbc.groupId>net.sourceforge.jtds</jdbc.groupId>
				<jdbc.artifactId>jtds</jdbc.artifactId>
				<jdbc.version>1.2</jdbc.version>
				<jdbc.driverClassName>net.sourceforge.jtds.jdbc.Driver</jdbc.driverClassName>
				<jdbc.url>jdbc:jtds:sqlserver://localhost:3683/${db.name}</jdbc.url>
				<jdbc.username>sa</jdbc.username>
				<jdbc.password>appfuse</jdbc.password>
			</properties>
		</profile>

		<!-- ================= Container Profiles ================= -->
		<profile>
			<id>jboss</id>
			<properties>
				<cargo.container>jboss4x</cargo.container>
				<cargo.container.home>${env.JBOSS_HOME}</cargo.container.home>
				<cargo.container.url>http://easynews.dl.sourceforge.net/sourceforge/jboss/jboss-4.0.5.GA.zip</cargo.container.url>
			</properties>
		</profile>
	</profiles>

<!-- 
	<dependencyManagement>
		<dependencies>
			<dependency>
			</dependency>
		</dependencies>
	</dependencyManagement>
	 -->
	<dependencies>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- for hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${project.hibernateVersion}</version>
		</dependency>
		<!-- for hibernate end -->

		<!-- for openjpa -->
		<dependency>
			<groupId>org.apache.openjpa</groupId>
			<artifactId>openjpa</artifactId>
			<version>${project.openjpaVersion}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-lang</groupId>
					<artifactId>commons-lang</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- for openjpa end -->

		<!-- for database source -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>
		<!-- for database source end -->

		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>${project.cglib-nodepVersion}</version>
		</dependency>

		<dependency>
			<groupId>${jdbc.groupId}</groupId>
			<artifactId>${jdbc.artifactId}</artifactId>
			<version>${jdbc.version}</version>
		</dependency>

		<!-- for spring -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${project.springSecurityVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${project.springSecurityVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${project.springSecurityVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${project.springSecurityVersion}</version>
		</dependency>
		<!-- http://blog.csdn.net/zjh19870703/article/details/7618412 -->
		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core, org.springframework.util) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${project.springVersion}</version>
		</dependency>
		<!-- Expression Language (depends on spring-core) Define this if you use 
			Spring Expression APIs (org.springframework.expression) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Aspect Oriented Programming (AOP) Framework (depends on spring-core, 
			spring-beans) Define this if you use Spring AOP APIs (org.springframework.aop) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Various Application Context utilities, including EhCache, JavaMail, 
			Quartz, and Freemarker integration Define this if you need any of these integrations -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction, org.springframework.dao) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, 
			spring-tx) Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc) 
			<dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> 
			<version>${org.springframework.version}</version> </dependency> -->
		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Object-to-XML Mapping (OXM) abstraction and integration with JAXB, 
			JiBX, Castor, XStream, and XML Beans. (depends on spring-core, spring-beans, 
			spring-context) Define this if you need OXM (org.springframework.oxm) <dependency> 
			<groupId>org.springframework</groupId> <artifactId>spring-oxm</artifactId> 
			<version>${org.springframework.version}</version> </dependency> -->
		<!-- Web application development utilities applicable to both Servlet and 
			Portlet Environments (depends on spring-core, spring-beans, spring-context) 
			Define this if you use Spring MVC, or wish to use Struts, JSF, or another 
			web framework with Spring (org.springframework.web) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${project.springVersion}</version>
		</dependency>

		<!-- Spring MVC for Servlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Servlet 
			Container such as Apache Tomcat (org.springframework.web.servlet) <dependency> 
			<groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> 
			<version>${spring.version}</version> </dependency> -->
		<!-- Spring MVC for Portlet Environments (depends on spring-core, spring-beans, 
			spring-context, spring-web) Define this if you use Spring MVC with a Portlet 
			Container (org.springframework.web.portlet) <dependency> <groupId>org.springframework</groupId> 
			<artifactId>spring-webmvc-portlet</artifactId> <version>${spring.version}</version> 
			</dependency> -->
		<!-- Support for testing Spring applications with tools such as JUnit and 
			TestNG This artifact is generally always defined with a 'test' scope for 
			the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${project.springVersion}</version>
			<scope>test</scope>
		</dependency>
		<!-- for spring end -->

		<!-- for AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${project.aspectjVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjtools</artifactId>
			<version>${project.aspectjVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${project.aspectjVersion}</version>
		</dependency>
		<!-- for AspectJ end -->

		<!-- for struts -->
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-core</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-convention-plugin</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-spring-plugin</artifactId>
			<version>${project.strutsVersion}</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-json-plugin</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-sitemesh-plugin</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-dojo-plugin</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-jfreechart-plugin</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<!-- <dependency> <groupId>commons-fileupload</groupId> <artifactId>commons-fileupload</artifactId> 
			<version>${commons.fileupload.version}</version> </dependency> <dependency> 
			<groupId>commons-io</groupId> <artifactId>commons-io</artifactId> <version>${commons.io.version}</version> 
			</dependency> -->
		<!-- for struts end -->
		
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>runtime</scope>
		</dependency>

<!-- <dependency> <groupId>displaytag</groupId> <artifactId>displaytag</artifactId> 
			<version>${displaytag.version}</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> 
			<artifactId>jcl104-over-slf4j</artifactId> </exclusion> </exclusions> </dependency> -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${project.servlet-apiVersion}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${project.jsp-apiVersion}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.tuckey</groupId>
			<artifactId>urlrewritefilter</artifactId>
			<version>${project.urlrewritefilterVersion}</version>
		</dependency>

		<dependency>
			<groupId>org.jmock</groupId>
			<artifactId>jmock</artifactId>
			<version>${project.jmockVersion}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jmock</groupId>
			<artifactId>jmock-junit4</artifactId>
			<version>${project.jmockVersion}</version>
			<scope>test</scope>
		</dependency>
		<!-- Upgrade junit-dep used by jmock 
		The artifact junit:junit-dep:jar:4.11 has been relocated to junit:junit:jar:4.11
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit-dep</artifactId>
			<version>${project.junitVersion}</version>
			<scope>test</scope>
		</dependency>
		-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${project.junitVersion}</version>
			<scope>test</scope>
		</dependency>
		<!-- <dependency> <groupId>org.subethamail</groupId> <artifactId>subethasmtp-wiser</artifactId> 
			<version>${wiser.version}</version> <scope>test</scope> </dependency> -->

		<!-- for sitemesh -->



		<!-- for sitemesh end -->

		<!-- for jfreechar -->
		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.13</version>
		</dependency>

		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jcommon</artifactId>
			<version>1.0.16</version>
		</dependency>
		<!-- for jfreechar end -->

		<!-- for apache common configuration -->
		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<version>${project.commons-configurationVersion}</version>
			<!-- <exclusions> <exclusion> <groupId>commons-lang</groupId> <artifactId>commons-lang</artifactId> 
				</exclusion> </exclusions> -->
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${project.commons-beanutilsVersion}</version>
		</dependency>
		<dependency>
			<groupId>commons-jxpath</groupId>
			<artifactId>commons-jxpath</artifactId>
			<version>1.3</version>
		</dependency>
		<!-- for apache common configuration end -->

		<!-- for json included by struts <dependency> <groupId>net.sf.json-lib</groupId> 
			<artifactId>json-lib</artifactId> <version>2.4</version> <classifier>jdk15</classifier> 
			</dependency> for json end -->

		<!-- for jasperreport -->
		<dependency>
			<groupId>net.sf.jasperreports</groupId>
			<artifactId>jasperreports</artifactId>
			<version>${project.jasperreportsVersion}</version>
		</dependency>

		<!-- auto included <dependency> <groupId>commons-digester</groupId> <artifactId>commons-digester</artifactId> 
			<version>1.7</version> </dependency> <dependency> <groupId>commons-logging</groupId> 
			<artifactId>commons-logging</artifactId> <version>1.0.2</version> </dependency> -->
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>${project.itextVersion}</version>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.jexcelapi</groupId>
			<artifactId>jxl</artifactId>
			<version>${project.jxlVersion}</version>
		</dependency>
		<dependency>
			<groupId>com.keypoint</groupId>
			<artifactId>png-encoder</artifactId>
			<version>1.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>${project.poiVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>${project.groovy-allVersion}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.struts</groupId>
			<artifactId>struts2-jasperreports-plugin</artifactId>
			<version>${project.strutsVersion}</version>
		</dependency>
		<!-- for jasperreport end -->
	</dependencies>		
		
		
	<build>
		<defaultGoal>install</defaultGoal>
		<pluginManagement>
		  <plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>${project.versionsPluginVersion}</version>
			</plugin>
		  </plugins>
    	</pluginManagement>
		<plugins>
			<!-- for openjpa, see http://mojo.codehaus.org/openjpa-maven-plugin/index.html 
				for more details -->
			<!-- Run the following goal to run OpenJPA PCEnhancer on persistence-enabled 
				classes manually. mvn openjpa:enhance Run the following goal to run OpenJPA 
				MappingTool for creating the database creation SQL statements for all persistence-enabled 
				classes manually. mvn openjpa:sql Run the following goal to run OpenJPA MappingTool 
				for creating the schema mapping XML file for all persistence-enabled classes 
				manually. mvn openjpa:schema -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>openjpa-maven-plugin</artifactId>
				<version>1.2</version>
				<configuration>
					<includes>com/elulian/CustomerSecurityManagementSystem/vo/**/*.class</includes>
					<excludes>
						com/elulian/CustomerSecurityManagementSystem/vo/Condition.class,
						com/elulian/CustomerSecurityManagementSystem/vo/Role.class,
						com/elulian/CustomerSecurityManagementSystem/vo/BaseObject.class
					</excludes>
					<addDefaultConstructor>true</addDefaultConstructor>
					<enforcePropertyRestrictions>true</enforcePropertyRestrictions>
					<!-- Pass additional properties to the Plugin here <toolProperties> 
						<property> <name>directory</name> <value>otherdirectoryvalue</value> </property> 
						</toolProperties> -->
				</configuration>
				<executions>
					<execution>
						<id>enhancer</id>
						<phase>process-classes</phase>
						<goals>
							<goal>enhance</goal>
							<!-- <goal>schema</goal> -->
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- for openjpa end -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${project.compilerPluginVersion}</version>
				<configuration>
					<source>${project.complieSourceVersion}</source>
					<target>${project.complieSourceVersion}</target>
				</configuration>
			</plugin>
			<!-- generate sql schema file -->
			<!-- <plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>hibernate3-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<components>
						<component>
							<name>hbm2ddl</name>
							<implementation>annotationconfiguration</implementation>
							Use 'jpaconfiguration' if you're using JPA.
							<implementation>jpaconfiguration</implementation>
						</component>
					</components>
					<componentProperties>
						<drop>true</drop>
						<jdk5>true</jdk5>
						<propertyfile>${project.build.outputDirectory}/jdbc.properties</propertyfile>
						<skip>${skipTests}</skip>
					</componentProperties>
				</configuration>
				<executions>
					<execution>
						<phase>process-test-resources</phase>
						<goals>
							<goal>hbm2ddl</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
				</dependencies>
			</plugin> -->
			
			<plugin>
			 <groupId>org.codehaus.mojo</groupId>
        <artifactId>sql-maven-plugin</artifactId>
        <version>1.5</version>

        <dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
				</dependencies>

        <!-- common configuration shared by all executions -->
        <configuration>
        <driver>${jdbc.driverClassName}</driver>
					<username>${jdbc.username}</username>
					<password>${jdbc.password}</password>
					<url>${jdbc.url}</url>
          <!-- You can comment out username/password configurations and
               have maven to look them up in your settings.xml using ${settingsKey}
          
          <settingsKey>sensibleKey</settingsKey>
          -->
          <!--all executions are ignored if -Dmaven.skipTest=true-->
          <skip>${skipTests}</skip>
        </configuration>

        <executions>
<!--           <execution>
            <id>drop-db-before-test-if-any</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              need another database to drop the targeted one
              <url>jdbc:postgressql://localhost:5432:bootstrapdb</url>
              <autocommit>true</autocommit>
              <sqlCommand>drop database yourdb</sqlCommand>
              ignore error when database is not avaiable
              <onError>continue</onError>
            </configuration>
          </execution>
 -->
          <!-- <execution>
            <id>create-db</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <url>jdbc:postgressql://localhost:5432:yourdb</url>
              no transaction
              <autocommit>true</autocommit>
              <sqlCommand>create database yourdb</sqlCommand>
            </configuration>
          </execution> -->

          <execution>
            <id>create-schema</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <autocommit>true</autocommit>
              <srcFiles>
                <srcFile>src/main/resources/database.sql</srcFile>
              </srcFiles>
              <onError>continue</onError>
            </configuration>
          </execution>

      <!--     <execution>
            <id>create-data</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <orderFile>ascending</orderFile>
              <fileset>
                <basedir>${basedir}</basedir>
                <includes>
                  <include>src/test/sql/test-data2.sql</include>
                  <include>src/test/sql/test-data1.sql</include>
                </includes>
              </fileset>
            </configuration>
          </execution>

          drop db after test
          <execution>
            <id>drop-db-after-test</id>
            <phase>test</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <autocommit>true</autocommit>
              <sqlCommand>drop database yourdb</sqlCommand>
            </configuration>
          </execution> -->
        </executions>
      </plugin>
			
			<!-- database import/export -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>dbunit-maven-plugin</artifactId>
				<version>1.0-beta-3</version>
				<configuration>
					<dataTypeFactoryName>${dbunit.dataTypeFactoryName}</dataTypeFactoryName>
					<driver>${jdbc.driverClassName}</driver>
					<username>${jdbc.username}</username>
					<password>${jdbc.password}</password>
					<url>${jdbc.url}</url>
					<src>src/test/resources/sample-data.xml</src>
					<format>xml</format>
					<dest>src/test/resources/sample-data.xml</dest>
					<type>${dbunit.operation.type}</type>
					<schema>${dbunit.schema}</schema>
					<skip>${skipTests}</skip>
					<transaction>true</transaction>
				</configuration>
				<executions>
					<!-- export database content, usually not used, run mvn dbunit:export 
						manually if required -->
					<!-- <execution> <id>test-compile</id> <phase>test-compile</phase> <goals> 
						<goal>export</goal> </goals> </execution> -->
					<execution>
						<id>test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>operation</goal>
						</goals>
					</execution>
					<!-- Runs before integration tests and jetty:run-war -->
					<execution>
						<id>test</id>
						<phase>test</phase>
						<goals>
							<goal>operation</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>${jdbc.groupId}</groupId>
						<artifactId>${jdbc.artifactId}</artifactId>
						<version>${jdbc.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${project.jettyPluginVersion}</version>
				<configuration>
					<webApp>
						<contextPath>${web.deployname}</contextPath>
					</webApp>
				</configuration>
			</plugin>
			<!-- clean-up previous hibernate-search indexed from integration tests, 
				as there could be a lock -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${project.cleanPluginVersion}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${user.home}/${project.build.finalName}/index</directory>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!-- will package a ready-to-run app regarding hibernate-search index 
				location -->
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${project.warPluginVersion}</version>
				<configuration>
					<escapeString>\</escapeString>
					<!-- <webResources> <resource> <directory>src/main/resources/packaged</directory> 
						<targetPath>WEB-INF/classes</targetPath> <filtering>true</filtering> <includes> 
						<include>hibernate.properties</include> </includes> </resource> </webResources> -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>native2ascii-maven-plugin</artifactId>
				<version>1.0-beta-1</version>
				<executions>
					<execution>
						<id>native2ascii-utf8</id>
						<goals>
							<goal>native2ascii</goal>
						</goals>
						<configuration>
							<encoding>UTF8</encoding>
							<includes>
								<include>globalMessages_zh*.properties</include>
								<include>branch.properties</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/main/webapp</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</testResource>
			<testResource>
				<directory>src/main/java</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/applicationContext*.xml</include>
				</includes>
			</testResource>
			<testResource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/applicationContext*.xml</include>
				</includes>
				<filtering>true</filtering>
			</testResource>
		</testResources>
	</build>

	

	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-changes-plugin</artifactId>
				<version>${project.changePluginVersion}</version>
			</plugin>
			<plugin>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<configuration>
					<consoleOutput>true</consoleOutput>
					<configLocation>https://raw.github.com/appfuse/appfuse/master/www/checkstyle.xml</configLocation>
					<failsOnError>false</failsOnError>
					<maxAllowedViolations>3</maxAllowedViolations>
				</configuration>
				<version>${project.checkstylePluginVersion}</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<configuration>
					<instrumentation>
						<excludes>
							<exclude>**/model/*.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>
				<version>${project.coberturaPluginVersion}</version>
			</plugin>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${project.javadocPluginVersion}</version>
			</plugin>
			<plugin>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${project.jxrPluginVersion}</version>
			</plugin>
			<plugin>
				<artifactId>maven-pmd-plugin</artifactId>
				<configuration>
					<linkXRef>true</linkXRef>
					<targetJdk>${project.complieSourceVersion}</targetJdk>
				</configuration>
				<version>${project.pmdPluginVersion}</version>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.12.4</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>webtest-maven-plugin</artifactId>
				<version>1.0.0</version>
			</plugin>
		</plugins>
	</reporting>

</project>
