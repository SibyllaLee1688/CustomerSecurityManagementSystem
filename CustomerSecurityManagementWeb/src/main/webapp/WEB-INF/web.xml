<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
         
	<display-name>Customer Security Management System</display-name>
	<distributable/>
	<!-- Context Configuration locations for Spring XML files -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
            classpath:**/applicationContext-resources.xml
            classpath:**/applicationContext-dao.xml
            classpath:**/applicationContext-service.xml
            /WEB-INF/applicationContext*.xml
            /WEB-INF/security.xml
        </param-value>
	</context-param>
	
	<context-param>     
      <param-name>log4jConfigLocation</param-name>     
      <param-value>WEB-INF/classes/log4j.xml</param-value>     
    </context-param>     
    
    <context-param>     
      <param-name>log4jRefreshInterval</param-name>     
      <param-value>6000</param-value>     
    </context-param>     
    
    <listener>     
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>     
    </listener> 

	<!-- not required in sturts2 <filter> <filter-name>EncodingFilter</filter-name> 
		<filter-class>common.filter.EncodingFilter</filter-class> </filter> -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
 <filter>
		<filter-name>rewriteFilter</filter-name>
		<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
		<!--	sets up log level (will be logged to context log) can be: TRACE, DEBUG, 
			INFO (default), WARN, ERROR, FATAL, log4j, commons, sysout:{level} (ie, sysout:DEBUG) 
			if you are having trouble using normal levels use sysout:DEBUG -->
		<init-param>
			<param-name>logLevel</param-name>
			<param-value>log4j</param-value>
		</init-param>
		<!-- set the amount of seconds the conf file will be checked for reload 
			can be a valid integer (0 denotes check every time, -1 denotes no reload 
			check, default -1) -->
		<init-param>
			<param-name>confReloadCheckInterval</param-name>
			<param-value>10</param-value>
		</init-param> 
	</filter> 
	<!-- access/access level will be replaced by spring security later http://blog.sina.com.cn/s/blog_3d9b8fb40100q0ql.html -->
<!-- 	<filter>
		<filter-name>AccessFilter</filter-name>
		<filter-class>com.elulian.CustomerSecurityManagementSystem.web.filter.AccessFilter</filter-class>
	</filter>

 <filter>
        <filter-name>AccessLevelFilter</filter-name>
        	delegate for accesslevelfiter in spring context<filter-class>com.elulian.CustomerSecurityManagementSystem.web.filter.AccessLevelFilter</filter-class>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter> -->


	<filter>
		<filter-name>securityFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>springSecurityFilterChain</param-value>
		</init-param>
	</filter>

   <filter>
        <filter-name>struts-prepare</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter</filter-class>
        <init-param>
            <param-name>actionPackages</param-name>
            <param-value>com.elulian.CustomerSecurityManagementSystem.web</param-value>
        </init-param>
    </filter>

	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
	</filter>

  <filter>
        <filter-name>struts</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter</filter-class>
        <init-param>
            <param-name>actionPackages</param-name>
            <param-value>com.elulian.CustomerSecurityManagementSystem.web</param-value>
        </init-param>
    </filter>

    <filter>
        <!-- simon统计filter -->
                <filter-name>simon-filter</filter-name>
                <filter-class>org.javasimon.javaee.SimonServletFilter</filter-class>
                <!-- optional -->
                <init-param>
                        <param-name>prefix</param-name>
                        <param-value>com.elulian.CustomerSecurityManagement</param-value>
                </init-param>
                <!-- optional basic plain-text console -->
                <init-param>
                        <param-name>console-path</param-name>
                        <param-value>/simon-filter</param-value>
                </init-param>
                <!-- optional, 需要报告的阀值 -->
                <init-param>
                        <param-name>report-threshold-ms</param-name>
                        <param-value>1000</param-value>
                </init-param>
                <!-- optional, 告警 - 显示到标准输出，可以自己定制报告 -->
                <init-param>
                        <param-name>request-reporter-class</param-name>
                        <param-value>org.javasimon.javaee.reqreporter.StandardRequestReporter</param-value>
                </init-param>
                <!-- optional, StopwatchSource instance -->
                <init-param>
                        <param-name>stopwatch-source-props</param-name>
                        <param-value>includeHttpMethodName=ALWAYS</param-value>
                </init-param>
        </filter>

        <!-- Web Console 显示Web统计信息，访问/simon-console 查看-->
        <filter>
                <filter-name>simon-console-filter</filter-name>
                <filter-class>org.javasimon.console.SimonConsoleFilter</filter-class>
                <init-param>
                        <param-name>url-prefix</param-name>
                        <param-value>/simon-console</param-value>
                </init-param>
        </filter>

        <!-- 大部分情况web查看console不是需要监控的，注意filter顺序 -->
        <filter-mapping>
                <filter-name>simon-console-filter</filter-name>
                <url-pattern>/*</url-pattern>
        </filter-mapping>

        <filter-mapping>
                <filter-name>simon-filter</filter-name>
                <url-pattern>/*</url-pattern>
        </filter-mapping>

		<!-- not required in sturts2 <filter-mapping> <filter-name>EncodingFilter</filter-name> 
		<url-pattern>/*</url-pattern> </filter-mapping> -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
<!-- 	<filter-mapping>
		<filter-name>localeFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>  -->
	
	<!-- <filter-mapping>
		<filter-name>AccessFilter</filter-name>
		<url-pattern>/customerInfo/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>AccessLevelFilter</filter-name>
		<url-pattern>/admin/*</url-pattern>
	</filter-mapping> -->

    <filter-mapping>
                <filter-name>rewriteFilter</filter-name>
                <url-pattern>/*</url-pattern>
    </filter-mapping>

	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
        

   <filter-mapping>
        <filter-name>struts-prepare</filter-name>
        <url-pattern>/*</url-pattern>
        <!-- <url-pattern>*.jsp</url-pattern> -->
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
    </filter-mapping>

	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
	
    <filter-mapping>
        <filter-name>struts</filter-name>
        <url-pattern>*.action</url-pattern>
        <!-- *.action -->
       <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
       <!--  <dispatcher>INCLUDE</dispatcher> -->
    </filter-mapping>

	<filter-mapping>
		<filter-name>struts</filter-name>
		<url-pattern>/struts/*</url-pattern>
	</filter-mapping>
	
	<!-- spring loader -->
	<listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  	</listener>
  	<!-- clean up interspectors -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>
    <!-- spring new scope for web: request, session, global session -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    
    <listener>  
  <listener-class>   
    org.springframework.security.web.session.HttpSessionEventPublisher   
  </listener-class>  
</listener>
    
   <!--  <listener>
        <listener-class>com.ericsson.elulian.web.webapp.listener.StartupListener</listener-class>
    </listener>
    <listener>
        <listener-class>com.ericsson.elulian.web.webapp.listener.UserCounterListener</listener-class>
    </listener> 
    <listener>
        <listener-class>com.ericsson.elulian.web.webapp.jsp.EscapeXmlELResolverListener</listener-class>
    </listener>
  -->
   <!--  <servlet>
        <servlet-name>dwr-invoker</servlet-name>
        <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>true</param-value>
        </init-param>
    </servlet>

    <servlet>
        <servlet-name>CXFServlet</servlet-name>
        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>dwr-invoker</servlet-name>
        <url-pattern>/dwr/*</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>CXFServlet</servlet-name>
        <url-pattern>/services/*</url-pattern>
    </servlet-mapping>
 -->

    <error-page>
        <error-code>500</error-code>
        <location>/error.jsp</location>
    </error-page>
    <error-page>
        <error-code>400</error-code>
        <location>/index.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/403.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/404.jsp</location>
    </error-page>

    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <trim-directive-whitespaces>true</trim-directive-whitespaces>
        </jsp-property-group>
    </jsp-config>

    <session-config>
        <session-timeout>15</session-timeout>
        <cookie-config>
            <http-only>true</http-only>
            <!--<secure>true</secure>-->
        </cookie-config>
        <tracking-mode>COOKIE</tracking-mode>
    </session-config>	
	
	<servlet>
		<description>set the configuration of this application</description>
		<display-name>ConfigServlet</display-name>
		<servlet-name>ConfigServlet</servlet-name>
		<servlet-class>com.elulian.CustomerSecurityManagementSystem.common.ConfigServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>ConfigServlet</servlet-name>
		<url-pattern>/ConfigServlet</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<!-- <welcome-file>login/start.action</welcome-file>
		<welcome-file>login/login.jsp</welcome-file> -->
	</welcome-file-list>

</web-app>
