<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<http pattern="/images/**" security="none" />
	<!-- <http pattern="/styles/**" security="none"/> -->
	<http pattern="/js/**" security="none" />

	<!-- <beans:bean id="accessLevelFilterImpl" class="com.elulian.CustomerSecurityManagementSystem.web.filter.AccessLevelFilter" 
		/> <beans:bean id="AccessLevelFilter" class="org.springframework.security.web.FilterChainProxy"> 
		<filter-chain-map path-type="ant"> <filter-chain pattern="/*" filters="accessLevelFilterImpl" 
		/> </filter-chain-map> </beans:bean> -->

	<http auto-config="true">

		<!-- To avoid remember me http://lengyun3566.iteye.com/blog/1119259 we 
			need to have fullyAuthenticated <intercept-url pattern="/riskRank/remove.action" 
			access="hasRole('ROLE_ADMIN') and fullyAuthenticated"/> <intercept-url pattern="/riskRank/save.action" 
			access="hasRole('ROLE_ADMIN') and fullyAuthenticated"/> -->
		<intercept-url pattern="/riskRank/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/threshold/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/userInfo/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/customerInfo/*" access="ROLE_ADMIN,ROLE_USER" />
		<intercept-url pattern="/selfService/start.action"
			access="ROLE_ANONYMOUS,ROLE_ADMIN,ROLE_USER" />
		<intercept-url pattern="/**/*.action*" access="ROLE_ADMIN,ROLE_USER" />
		<form-login login-page="/selfService/start.action"
			authentication-failure-url="/selfService/start.action"
			login-processing-url="/j_security_check" />
		<logout logout-success-url="/selfService/start.action"
			logout-url="/j_security_logout" />
		<session-management invalid-session-url="/selfService/start.action">
			<concurrency-control error-if-maximum-exceeded="false"
				max-sessions="1" expired-url="/selfService/start.action" />
		</session-management>
		<!-- 3600 * 24 * 90 if data-source-ref is not used, Simple Hash-Based Token Approach 
		     is used which is not recommend-->
		<remember-me data-source-ref="hikariCPDataSource" token-validity-seconds="7776000"
			key="e37f4b31-0c45-11dd-bd0b-0800200c9a66" />
	</http>

	<beans:bean name="bcryptEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<authentication-manager>
		<authentication-provider user-service-ref="userInfoService">
			<password-encoder ref="bcryptEncoder" />
		</authentication-provider>
	</authentication-manager>

	<global-method-security jsr250-annotations="enabled" />

	<!-- http://lengyun3566.iteye.com/blog/1170112 we should follow jsr250 to 
		define service access security <global-method-security> <protect-pointcut 
		expression="execution(* *..service.UserManager.getUsers(..))" access="ROLE_ADMIN"/> 
		<protect-pointcut expression="execution(* *..service.UserManager.removeUser(..))" 
		access="ROLE_ADMIN"/> </global-method-security> -->
</beans:beans>
