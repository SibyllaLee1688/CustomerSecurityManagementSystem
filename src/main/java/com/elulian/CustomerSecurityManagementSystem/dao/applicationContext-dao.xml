<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
           	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
	default-lazy-init="true">
	<!-- <bean class="org.springframework.orm.hibernate4.HibernateExceptionTranslator"/> 
		<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/> 
		Hibernate SessionFactory <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" 
		destroy-method="destroy"> <property name="dataSource" ref="dataSource"/> 
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/> <property 
		name="hibernateProperties"> <props> <prop key="hibernate.dialect">${hibernate.dialect}</prop> 
		<prop key="hibernate.query.substitutions">true 'Y', false 'N'</prop> <prop 
		key="hibernate.cache.use_second_level_cache">true</prop> <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> 
		Hibernate Search index directory <prop key="hibernate.search.default.indexBase">${app.search.index.basedir}</prop> 
		</props> Turn batching off for better error messages under PostgreSQL hibernate.jdbc.batch_size=0 
		</property> </bean> Transaction manager for a single Hibernate SessionFactory 
		(alternative to JTA) <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> 
		<property name="sessionFactory" ref="sessionFactory"/> </bean> -->

	<!-- Activates scanning of @Autowired -->
	<context:annotation-config />

	<!-- Activates scanning of @Repository -->
	<context:component-scan
		base-package="com.elulian.CustomerSecurityManagementSystem.dao" />

	<!-- comment hibernate config <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="${jdbc.driverClassName}" 
		/> <property name="url" value="${jdbc.url}" /> <property name="username" 
		value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
		/> <property name="maxActive" value="100" /> <property name="maxWait" value="1000" 
		/> <property name="poolPreparedStatements" value="true" /> <property name="defaultAutoCommit" 
		value="true" /> <property name="validationQuery" value="SELECT 1+1" /> <property 
		name="testOnBorrow" value="true" /> </bean> -->

	<!-- It is not necessary to configure a Spring loadTimeWeaver when using 
		OpenJPA build time enhancement. The following warning message will be logged 
		by OpenJPA when creating an EntityManagerFactory but it can be safely ignored. 
		WARN [main] while registering a ClassTransformer with PersistenceUnitInfo: 
		name 'PuName', root URL [file:/.../]. The error has been consumed. To see 
		it, set your openjpa.Runtime log level to TRACE. Load-time class transformation 
		will not be available. -->

	<!-- <context:load-time-weaver/> -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="mysql" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter">
				<property name="showSql" value="false" />
				<property name="generateDdl" value="true" />
				<property name="databasePlatform"
					value="org.apache.openjpa.jdbc.sql.MySQLDictionary" />
			</bean>
		</property>

		<!-- <property name="loadTimeWeaver"> <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" 
			/> </property> -->
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- replaced by annotation <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" 
		/> <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		/> <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor"> 
		<property name="transactionManager" ref="txManager" /> <property name="transactionAttributeSource"> 
		<bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" 
		/> </property> </bean> <bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor"> 
		<property name="transactionInterceptor" ref="transactionInterceptor" /> </bean> -->

</beans>
